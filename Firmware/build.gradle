apply plugin: 'c'

task cppcheck(type:Exec) {
    description 'statically analyze opq code with cppcheck'
    commandLine 'cppcheck', 'src/opq/cpp',
              '--std=c++11',
              '-q',
              '--force', 
              '--template', '[{severity}] {file}:{line} "{message}"',
              '-Isrc/cmsis/headers',
              '-Isrc/cmsis_boot/headers',
              '-Isrc/stm_lib/headers',
              '--enable=warning',
              '--enable=performance',
              '--error-exitcode=1'
}

model {
    platforms {
        arm32 {
            architecture "arm32"
        }
    }

    toolChains {
        crossGcc(Gcc) {
            target 'arm32'

            eachPlatform { tools ->
                tools.cCompiler.executable = 'arm-none-eabi-gcc'
                tools.cppCompiler.executable = 'arm-none-eabi-g++'
                tools.assembler.executable = 'arm-none-eabi-as'
                tools.linker.executable = 'arm-none-eabi-ld'
            }
        }
    }

    components {
        cmsis(NativeLibrarySpec) {
            sources {
                c.exportedHeaders {
                    srcDirs 'src/cmsis/headers'
                }
            }
        }

        cmsis_boot(NativeLibrarySpec) {
            sources {
                c.lib library: 'cmsis', linkage: 'static'
                c.lib library: 'stm_lib', linkage: 'static'

                c.exportedHeaders {
                    srcDirs 'src/cmsis_boot/headers'
                }
            }
        }

        stm_lib(NativeLibrarySpec) {
            sources {
                c.lib library: 'cmsis', linkage: 'static'
                c.lib library: 'cmsis_boot', linkage: 'static'

                c.exportedHeaders {
                    srcDirs 'src/stm_lib/headers'
                }
            }
        }

        opq(NativeExecutableSpec) {
            sources {
                c.lib library: 'cmsis', linkage: 'static'     
                c.lib library: 'cmsis_boot', linkage: 'static'     
                c.lib library: 'stm_lib', linkage: 'static'     
            }
            binaries.all {
                linker.args '-Tsrc/arm-gcc-link.ld', '-L/usr/arm-none-eabi/lib/fpu', 
                            '-lc_nano', '-lm', '-lstdc++_nano'
            } 
        }

        all {
            targetPlatform 'arm32'

            def common_args = [
                '-Wall',
                '-Werror',
                '-mcpu=cortex-m4', 
                '-mthumb',
                '-mfpu=fpv4-sp-d16',
                '-mfloat-abi=hard',
                '-DSTM32F303VC', 
                '-DSTM32F30X', 
                '-D__FPU_USED',
                '-DUSE_STDPERIPH_DRIVER'
            ]

            binaries.all { 
                cCompiler.args (*common_args + "-std=c11")
                cppCompiler.args (*common_args + "-std=c++14")
            }
        }
    }
}
